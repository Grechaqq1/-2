import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = "8136958130:AAGtpXee4gdbmvEaTuIE00Vo9O8Xs6hk1Do"
WEATHER_API_KEY = "f220c36b6d3de34ef2082f3d53c82742"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    return ReplyKeyboardMarkup([
        ["üå§Ô∏è –ü–æ–≥–æ–¥–∞", "üíµ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç"],
        ["üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ", "üìÜ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    if text == "üå§Ô∏è –ü–æ–≥–æ–¥–∞":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º:\n(–ù–∞–ø—Ä–∏–º–µ—Ä: Moscow –∏–ª–∏ –ú–æ—Å–∫–≤–∞)",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
        context.user_data["awaiting_city"] = True

    elif text == "üíµ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç":
        rates = get_currency_rates()
        await update.message.reply_text(rates, reply_markup=get_main_menu())

    elif text == "üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ":
        import random
        await update.message.reply_text(
            f"üéØ –í–∞—à–µ —á–∏—Å–ª–æ: {random.randint(1, 100)}",
            reply_markup=get_main_menu()
        )

    elif text == "üìÜ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è":
        from datetime import datetime
        now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        await update.message.reply_text(
            f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:\n{now}",
            reply_markup=get_main_menu()
        )

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n"
            "‚Ä¢ –ü–æ–≥–æ–¥–∞ - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ\n"
            "‚Ä¢ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –¥–æ–ª–ª–∞—Ä–∞ –∏ –µ–≤—Ä–æ\n"
            "‚Ä¢ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 100\n"
            "‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è - —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
            reply_markup=get_main_menu()
        )

    elif text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu()
        )
        context.user_data["awaiting_city"] = False

    elif context.user_data.get("awaiting_city"):
        weather = get_weather(text)
        await update.message.reply_text(weather, reply_markup=get_main_menu())
        context.user_data["awaiting_city"] = False

    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=get_main_menu()
        )

def get_weather(city: str) -> str:
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ —Å–Ω–∞—á–∞–ª–∞ —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
        response = requests.get(url, timeout=5)
        data = response.json()

        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        if data.get("cod") != 200:
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric"
            response = requests.get(url, timeout=5)
            data = response.json()

        if data.get("cod") != 200:
            error_msg = data.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            return f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—à–∏–±–∫–∞: {error_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."

        # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        weather_icons = {
            "clear": "‚òÄÔ∏è",
            "clouds": "‚õÖ",
            "rain": "üåßÔ∏è",
            "snow": "‚ùÑÔ∏è",
            "thunderstorm": "‚õàÔ∏è",
            "drizzle": "üå¶Ô∏è",
            "mist": "üå´Ô∏è"
        }

        weather_type = data["weather"][0]["main"].lower()
        icon = weather_icons.get(weather_type, "üå§Ô∏è")

        temp = data["main"]["temp"]
        feels_like = data["main"]["feels_like"]
        description = data["weather"][0]["description"].capitalize()
        humidity = data["main"]["humidity"]
        wind = data["wind"]["speed"]

        return (
            f"{icon} –ü–æ–≥–æ–¥–∞ –≤ {data['name']}:\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}\n"
            f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"‚Ä¢ –í–µ—Ç–µ—Ä: {wind} –º/—Å"
        )

    except requests.exceptions.Timeout:
        return "‚åõ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–≥–æ–¥—ã"
    except Exception as e:
        logging.error(f"Weather API error: {str(e)}")
        return "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def get_currency_rates() -> str:
    try:
        url = "https://www.cbr-xml-daily.ru/daily_json.js"
        response = requests.get(url, timeout=5)
        data = response.json()
        usd = data["Valute"]["USD"]["Value"]
        eur = data["Valute"]["EUR"]["Value"]
        return (
            "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –¶–ë –†–§:\n"
            f"‚Ä¢ –î–æ–ª–ª–∞—Ä: {usd:.2f} —Ä—É–±\n"
            f"‚Ä¢ –ï–≤—Ä–æ: {eur:.2f} —Ä—É–±"
        )
    except Exception as e:
        logging.error(f"Currency API error: {str(e)}")
        return "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()
